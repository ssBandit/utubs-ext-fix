Index: youtube.js
===================================================================
--- youtube.js	(revision 2)
+++ youtube.js	(working copy)
@@ -38,6 +38,7 @@
     'video_liked': localStorage['video_rated'],
     'video_commented': localStorage['video_commented']
   };
+  this.numNewItems_ = 0;
 };
 
 
@@ -60,6 +61,13 @@
 
 
 /**
+ * A list of all feed items.
+ * @type {Array.<Object>}
+ */
+YouTube.prototype.feedItems_;
+
+
+/**
  * The id of the interval used for polling.
  * @type {number}
  */
@@ -74,6 +82,20 @@
 
 
 /**
+ * Personalized user configs.
+ * @type {Object}
+ */
+YouTube.prototype.options_;
+
+
+/**
+ * The number of items since the last time the user accessed the extension.
+ * @type {number}
+ */
+YouTube.prototype.numNewItems_;
+
+
+/**
  * The API key for YouTube requests.
  * @type {String}
  */
@@ -123,6 +145,13 @@
 
 
 /**
+ * Feature parameter for the extension. Used for analytics.
+ * @type {string}
+ */
+YouTube.FEATURE_YOUTUBE_FEED_CHROME_EXTENSION = 'ytfce';
+
+
+/**
  * The prefix URL for a user's channel.
  * @type {string}
  */
@@ -183,16 +212,20 @@
  * Supported event types.
  * @type {Array.<String>}
  */
-YouTube.SUPPORTED_EVENT_TYPES = ['video_uploaded', 'video_favorited',
-                                 'video_rated', 'video_liked',
-                                 'video_commented'];
+YouTube.SUPPORTED_EVENT_TYPES = [
+    'video_uploaded',
+    'video_favorited',
+    'video_rated',
+    'video_liked',
+    'video_commented'
+];
 
 
 /**
  * Initializes a YouTube object.
  */
 YouTube.prototype.initialize = function() {
-  this.setVisualState_();
+  this.setVisualState();
   chrome.tabs.onRemoved.addListener(Util.bind(this.onTabRemoved_, this));
 };
 
@@ -219,7 +252,7 @@
  */
 YouTube.prototype.logout = function() {
   this.oauth_.clearTokens();
-  this.setVisualState_();
+  this.setVisualState();
 };
 
 
@@ -238,6 +271,14 @@
 
 
 /**
+ * Resets the number of new items.
+ */
+YouTube.prototype.resetNumNewItems = function() {
+  this.numNewItems_ = 0;
+};
+
+
+/**
  * Marks the feed item as removed and removes it from the feed array and map.
  * @param {string} feedItemId The id of the feed item whose video will be
  *     played.
@@ -249,7 +290,6 @@
     mapEntry['removed'] = true;
     delete mapEntry['item'];  // No need to keep the item anymore.
     localStorage['rm-' + feedItemId] = 'true';  // Persist in localStorage.
-    this.setVisualState_();
   }
 };
 
@@ -283,7 +323,7 @@
       try {
         if (this.shouldShowFeedItem_(this.feedItems_[i], this.options_)) {
           var child = this.buildFeedItemElement_(feedEntryTemplate,
-              this.feedItems_[i]);
+                                                 this.feedItems_[i]);
           if (child) {
             div.appendChild(child);
             ++count;
@@ -363,7 +403,7 @@
                             videoInfo['author'][0]['name']['$t'];
 
   // Prepare the content for the basic DOM for the feed entry.
-  var userChannelUrl = YouTube.CHANNEL_PREFIX_URL + username;
+  var userChannelUrl = Util.channelUrl(username);
   var feedEntryTitle = chrome.i18n.getMessage('eventType_' + eventType,
                                               [userChannelUrl, username]);
 
@@ -380,10 +420,9 @@
 
   if (videoInfo) {
     // Prepare the content for the video info for the feed entry.
-    var videoUrl = YouTube.WATCH_VIDEO_PREFIX_URL + videoId;
-    var videoAuthorChannelUrl = YouTube.CHANNEL_PREFIX_URL + videoAuthorUsername;
-    var videoThumbnailSrc = YouTube.VIDEO_THUMBNAIL_PREFIX_URL + videoId +
-                            '/default.jpg';
+    var videoUrl = Util.videoWatchUrl(videoId);
+    var videoAuthorChannelUrl = Util.channelUrl(videoAuthorUsername);
+    var videoThumbnailSrc = Util.thumbnailUrl(videoId);
     var formattedViewCount = Util.formatViewCount(videoViewCount);
     var viewCountText = chrome.i18n.getMessage('viewCount',
                                                [formattedViewCount]);
@@ -421,7 +460,7 @@
  * Sets the objects visual state. 
  * @return
  */
-YouTube.prototype.setVisualState_ = function() {
+YouTube.prototype.setVisualState = function() {
   this.setIcon_();
   this.setBadgeText_();
 };
@@ -431,7 +470,7 @@
  * Executed when a user has been authorized.
  */
 YouTube.prototype.onAuthorized_ = function() {
-  this.setVisualState_();
+  this.setVisualState();
   this.getTheFeed_();
 };
 
@@ -488,6 +527,7 @@
           'item': feedItem,
           'removed': false
         };
+        ++this.numNewItems_;
       }
     }
     this.sortItems_();
@@ -497,19 +537,6 @@
 
 
 /**
- * Executed when the video metadata has been received from the GData server.
- * @param {Object} feedItem The feed item for which the video metadata is
- *     retrieved.
- * @param {string} text The parsed text from the xhr.
- * @param {XmlHttpRequest} xhr The XmlHttpRequest that finished executing.
- */
-YouTube.prototype.onVideoMetadataReceived_ = function(feedItem, text, xhr) {
-  var data = JSON.parse(text);
-  feedItem['videoInfo'] = data['entry'];
-};
-
-
-/**
  * Sets the proper icon based on the state of the system.
  */
 YouTube.prototype.setIcon_ = function() {
@@ -525,16 +552,8 @@
  * Sets the proper badge text based on the state of the system.
  */
 YouTube.prototype.setBadgeText_ = function() {
-  if (this.oauth_.hasToken() && !!this.feedItems_.length) {
-    var count = 0;
-    for (var i = 0; i < this.feedItems_.length; ++i) {
-      if (this.shouldShowFeedItem_(this.feedItems_[i], this.options_)) {
-        ++count;
-      } else {
-      }
-    }
-    count = Math.min(count, this.options_['numFeedItems']);
-    chrome.browserAction.setBadgeText({'text': '' + count});
+  if (this.oauth_.hasToken() && this.numNewItems_ > 0) {
+    chrome.browserAction.setBadgeText({'text': '' + this.numNewItems_});
   } else {
     chrome.browserAction.setBadgeText({'text': ''});
   }
@@ -845,3 +864,35 @@
   }
   return result;
 };
+
+
+/**
+ * Builds a video watch url given a video id.
+ * @param {string} videoId The id of the video.
+ * @return {string} The watch url for the video.
+ */
+Util.videoWatchUrl = function(videoId) {
+  return YouTube.WATCH_VIDEO_PREFIX_URL + videoId + '&feature=' +
+         YouTube.FEATURE_YOUTUBE_FEED_CHROME_EXTENSION;
+};
+
+
+/**
+ * Builds a channel url given a username.
+ * @param {string} username The username for the channel.
+ * @return {string} The channel url for that user's channel.
+ */
+Util.channelUrl = function(username) {
+  return YouTube.CHANNEL_PREFIX_URL + username + '&feature=' +
+         YouTube.FEATURE_YOUTUBE_FEED_CHROME_EXTENSION;
+};
+
+
+/**
+ * Builds a thumbnail url given a video.
+ * @param {string} videoId The id of the video.
+ * @return {string} The thumbnail url for the video.
+ */
+Util.thumbnailUrl = function(videoId) {
+  return YouTube.VIDEO_THUMBNAIL_PREFIX_URL + videoId + '/default.jpg';
+};
Index: feeds.html
===================================================================
--- feeds.html	(revision 2)
+++ feeds.html	(working copy)
@@ -97,6 +97,7 @@
           needLoginDiv.appendChild(needLoginH2);
           feedDom.innerHTML = needLoginDiv.innerHTML;
         }
+        youtube.resetNumNewItems();
       }
     </script>
   </head>
Index: img/icon16.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: img/icon16.png
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: img/icon-off.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: img/icon-on.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: img/icon128.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: img/icon128.png
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: img/icon48.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: img/icon48.png
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: img/options-logo-big.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: img/options-logo-big.png
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: manifest.json
===================================================================
--- manifest.json	(revision 2)
+++ manifest.json	(working copy)
@@ -1,15 +1,20 @@
 {
   "name": "__MSG_extName__",
-  "version": "1.3.1",
+  "version": "1.3.2",
   "description": "__MSG_extDescription__",
   "default_locale": "en",
   "background_page": "background.html",
   "options_page": "options.html",
   "browser_action": {
-    "default_icon": "img/icon-off.png",
+    "default_icon": "img/icon16.png",
     "default_title": "__MSG_extTitle__",
     "popup": "feeds.html"
   },
+  "icons": {
+    "16": "icon16.png",
+    "48": "icon48.png",
+    "128": "icon128.png"
+  },
   "permissions": [
     "tabs",
     "http://gdata.youtube.com/",
Index: options.html
===================================================================
--- options.html	(revision 2)
+++ options.html	(working copy)
@@ -144,6 +144,7 @@
   </head>
   <body onload='initialize()'>
     <div class="main">
+      <img src="img/options-logo-big.png"/>
       <div id='message' style='display: none;'></div>
       <div id='options'>
         <div id='option_polling_interval' class='optionDiv'>
